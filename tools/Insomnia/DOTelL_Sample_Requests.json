{"_type":"export","__export_format":4,"__export_date":"2023-10-26T05:02:11.411Z","__export_source":"insomnia.desktop.app:v8.3.0","resources":[{"_id":"greq_1c40edbcb03845bea35fe0611eb82097","parentId":"wrk_2f8de886d7bd4a87b204d9df71187137","modified":1698295289609,"created":1697937101256,"url":"localhost:4317","name":"Send Logs","description":"","protoFileId":"pf_10211ff4dbda416b84bca7a2803a75f8","protoMethodName":"/opentelemetry.proto.collector.logs.v1.LogsService/Export","metadata":[],"body":{"text":"{\n\t\"resource_logs\": [\n\t\t{\n\t\t\t\"resource\": {\n\t\t\t\t\"attributes\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"service.name\",\n\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\"string_value\": \"Insomnia\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"scope_logs\": [\n\t\t\t\t{\n\t\t\t\t\t\"scope\": {\n\t\t\t\t\t\t\"name\": \"my.library\",\n            \"version\": \"1.0.0\",\n\t\t\t\t\t\t\"attributes\": [\n              {\n                \"key\": \"my.scope.attribute\",\n                \"value\": {\n                  \"string_value\": \"some scope attribute\"\n                }\n              }\n            ]\n\t\t\t\t\t},\n\t\t\t\t\t\"log_records\": [\n\t\t\t\t\t\t{\n              \"time_unix_nano\": 1544712660300000000,\n              \"observed_time_unix_nano\": 0,\n\t\t\t\t\t\t\t\"severity_number\": 1,\n              \"severity_text\": \"Information\",\n\t\t\t\t\t\t\t\"body\": {\n                \"string_value\": \"Example log record\"\n              },\n              \"attributes\": [\n                {\n                  \"key\": \"string.attribute\",\n                  \"value\": {\n                    \"string_value\": \"some string\"\n                  }\n                },\n                {\n                  \"key\": \"boolean.attribute\",\n                  \"value\": {\n                    \"bool_value\": true\n                  }\n                },\n                {\n                  \"key\": \"int.attribute\",\n                  \"value\": {\n                    \"int_value\": 10\n                  }\n                },\n                {\n                  \"key\": \"double.attribute\",\n                  \"value\": {\n                    \"double_value\": 637.704\n                  }\n                },\n                {\n                  \"key\": \"array.attribute\",\n                  \"value\": {\n                    \"array_value\": {\n                      \"values\": [\n                        {\n                          \"string_value\": \"many\"\n                        },\n                        {\n                          \"string_value\": \"values\"\n                        }\n                      ]\n                    }\n                  }\n                },\n                {\n                  \"key\": \"map.attribute\",\n                  \"value\": {\n                    \"kvlist_value\": {\n                      \"values\": [\n                        {\n                          \"key\": \"some.map.key\",\n                          \"value\": {\n                            \"string_value\": \"some value\"\n                          }\n                        }\n                      ]\n                    }\n                  }\n                }\n              ],\n\t\t\t\t\t\t\t\"flags\": null,\n\t\t\t\t\t\t\t\"trace_id\": \"5B8EFFF798038103D269B633813FC60C\",\n              \"span_id\": \"EEE19B7EC3C1B174\"\n            }\n\t\t\t\t\t],\n\t\t\t\t\t\"schema_url\": null\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}"},"metaSortKey":-1698295229921,"isPrivate":false,"_type":"grpc_request"},{"_id":"wrk_2f8de886d7bd4a87b204d9df71187137","parentId":null,"modified":1697936631636,"created":1697936631636,"name":"DOTelL","description":"","scope":"collection","_type":"workspace"},{"_id":"greq_dc1189d197d6448aa2fa0dc23153b1e6","parentId":"wrk_2f8de886d7bd4a87b204d9df71187137","modified":1698295873682,"created":1698295229821,"url":"localhost:4317","name":"Send Metrics","description":"","protoFileId":"pf_44a5211caf98483996db3c8dac184414","protoMethodName":"/opentelemetry.proto.collector.metrics.v1.MetricsService/Export","metadata":[],"body":{"text":"{\n\t\"resource_metrics\": [\n\t\t{\n\t\t\t\"resource\": {\n\t\t\t\t\"attributes\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"service.name\",\n\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\"string_value\": \"Insomnia\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"scope_metrics\": [\n\t\t\t\t{\n\t\t\t\t\t\"scope\": {\n\t\t\t\t\t\t\"name\": \"my.library\",\n            \"version\": \"1.0.0\",\n\t\t\t\t\t\t\"attributes\": [\n              {\n                \"key\": \"my.scope.attribute\",\n                \"value\": {\n                  \"string_value\": \"some scope attribute\"\n                }\n              }\n            ]\n\t\t\t\t\t},\n\t\t\t\t\t\"metrics\": [\n\t\t\t\t\t\t{\n              \"name\": \"my.counter\",\n              \"description\": \"I am a Counter\",\n\t\t\t\t\t\t\t\"unit\": \"1\",\n              \"sum\": {\n                \"data_points\": [\n                  {\n                    \"as_double\": 5,\n                    \"start_time_unix_nano\": 1544712660300000000,\n                    \"time_unix_nano\": 1544712660300000000,\n                    \"attributes\": [\n                      {\n                        \"key\": \"my.counter.attr\",\n                        \"value\": {\n                          \"string_value\": \"some value\"\n                        }\n                      }\n                    ]\n                  }\n                ],\n\t\t\t\t\t\t\t\t\"aggregation_temporality\": 1,\n                \"is_monotonic\": true\n              }\n            },\n            {\n              \"name\": \"my.gauge\",\n              \"description\": \"I am a Gauge\",\n\t\t\t\t\t\t\t\"unit\": \"1\",\n              \"gauge\": {\n                \"data_points\": [\n                  {\n                    \"as_double\": 10,\n                    \"time_unix_nano\": 1544712660300000000,\n                    \"attributes\": [\n                      {\n                        \"key\": \"my.gauge.attr\",\n                        \"value\": {\n                          \"string_value\": \"some value\"\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            },\n            {\n              \"name\": \"my.histogram\",\n              \"description\": \"I am a Histogram\",\n\t\t\t\t\t\t\t\"unit\": \"1\",\n              \"histogram\": {\n                \"aggregation_temporality\": 1,\n                \"data_points\": [\n                  {\n                    \"start_time_unix_nano\": 1544712660300000000,\n                    \"time_unix_nano\": 1544712660300000000,\n                    \"count\": 3,\n                    \"sum\": 3,\n                    \"bucketCounts\": [1,1,1],\n                    \"explicitBounds\": [1],\n                    \"min\": 1,\n                    \"max\": 1,\n                    \"attributes\": [\n                      {\n                        \"key\": \"my.histogram.attr\",\n                        \"value\": {\n                          \"string_value\": \"some value\"\n                        }\n                      }\n                    ]\n                  }\n                ]\n              }\n            }\n\t\t\t\t\t],\n\t\t\t\t\t\"schema_url\": null\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}"},"metaSortKey":-1698295229821,"isPrivate":false,"_type":"grpc_request"},{"_id":"greq_3da2077d6dbe4ed1b79c934aef48882d","parentId":"wrk_2f8de886d7bd4a87b204d9df71187137","modified":1698296366270,"created":1698295995167,"url":"localhost:4317","name":"Send Traces","description":"","protoFileId":"pf_42299af8534541beac867b0f454daccf","protoMethodName":"/opentelemetry.proto.collector.trace.v1.TraceService/Export","metadata":[],"body":{"text":"{\n\t\"resource_spans\": [\n\t\t{\n\t\t\t\"resource\": {\n\t\t\t\t\"attributes\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"key\": \"service.name\",\n\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\"string_value\": \"Insomnia\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"scope_spans\": [\n\t\t\t\t{\n\t\t\t\t\t\"scope\": {\n\t\t\t\t\t\t\"name\": \"my.library\",\n            \"version\": \"1.0.0\",\n\t\t\t\t\t\t\"attributes\": [\n              {\n                \"key\": \"my.scope.attribute\",\n                \"value\": {\n                  \"string_value\": \"some scope attribute\"\n                }\n              }\n            ]\n\t\t\t\t\t},\n\t\t\t\t\t\"spans\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"trace_id\": \"5B8EFFF798038103D269B633813FC60C\",\n              \"span_id\": \"EEE19B7EC3C1B174\",\n              \"parent_span_id\": \"EEE19B7EC3C1B173\",\n              \"name\": \"I'm a server span\",\n\t\t\t\t\t\t\t\"kind\": 2,\n              \"start_time_unix_nano\": 1544712660000000000,\n              \"end_time_unix_nano\": 1544712661000000000,\n              \"attributes\": [\n                {\n                  \"key\": \"my.span.attr\",\n                  \"value\": {\n                    \"string_value\": \"some value\"\n                  }\n                }\n              ],\n\t\t\t\t\t\t\t\"events\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"time_unix_nano\": 1544712661000000000,\n\t\t\t\t\t\t\t\t\t\"name\": \"I'm a span event\",\n\t\t\t\t\t\t\t\t\t\"attributes\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"my.span.event.attr\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"string_value\": \"some value\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"schema_url\": null\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}"},"metaSortKey":-1698295229721,"isPrivate":false,"_type":"grpc_request"},{"_id":"env_2920a5dbc7bef1673af38e8ff2d0d31426e58018","parentId":"wrk_2f8de886d7bd4a87b204d9df71187137","modified":1697936631638,"created":1697936631638,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1697936631638,"_type":"environment"},{"_id":"jar_2920a5dbc7bef1673af38e8ff2d0d31426e58018","parentId":"wrk_2f8de886d7bd4a87b204d9df71187137","modified":1697936631640,"created":1697936631640,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"pd_cc74250177bc4bd9878ed0bdd49ea185","parentId":"wrk_2f8de886d7bd4a87b204d9df71187137","modified":1697937298339,"created":1697937298339,"name":"opentelemetry-proto","_type":"proto_directory"},{"_id":"pd_3ae780b8cfe1480f980c1ccbde6b084e","parentId":"pd_cc74250177bc4bd9878ed0bdd49ea185","modified":1697937298339,"created":1697937298339,"name":"opentelemetry","_type":"proto_directory"},{"_id":"pd_a565ccb33f56416d879c7b5380521080","parentId":"pd_3ae780b8cfe1480f980c1ccbde6b084e","modified":1697937298338,"created":1697937298338,"name":"proto","_type":"proto_directory"},{"_id":"pd_63ca7ba7584b41df9ac1f45bbc86c2eb","parentId":"pd_a565ccb33f56416d879c7b5380521080","modified":1697937298327,"created":1697937298327,"name":"collector","_type":"proto_directory"},{"_id":"pd_f683340d77fd4b17beb6475f8594cc26","parentId":"pd_a565ccb33f56416d879c7b5380521080","modified":1697937298329,"created":1697937298329,"name":"common","_type":"proto_directory"},{"_id":"pd_bf98beab8bcc4834b19f0183d6c68e5b","parentId":"pd_a565ccb33f56416d879c7b5380521080","modified":1697937298331,"created":1697937298331,"name":"logs","_type":"proto_directory"},{"_id":"pd_c0b5deb8ba854e44be5bf75ff8ba4b8a","parentId":"pd_a565ccb33f56416d879c7b5380521080","modified":1697937298334,"created":1697937298334,"name":"metrics","_type":"proto_directory"},{"_id":"pd_69bd86a455ac406293e13309fc249ddf","parentId":"pd_a565ccb33f56416d879c7b5380521080","modified":1697937298336,"created":1697937298336,"name":"resource","_type":"proto_directory"},{"_id":"pd_82b3afdb97be45d1af42cbea8de5a15d","parentId":"pd_a565ccb33f56416d879c7b5380521080","modified":1697937298338,"created":1697937298338,"name":"trace","_type":"proto_directory"},{"_id":"pd_e9fa3f5afc4046888baba5ea07217340","parentId":"pd_63ca7ba7584b41df9ac1f45bbc86c2eb","modified":1697937298321,"created":1697937298321,"name":"logs","_type":"proto_directory"},{"_id":"pd_62b0c4df27924f6691092aa12544f509","parentId":"pd_63ca7ba7584b41df9ac1f45bbc86c2eb","modified":1697937298323,"created":1697937298323,"name":"metrics","_type":"proto_directory"},{"_id":"pd_6795105eba0a475bab4ff840264f5543","parentId":"pd_63ca7ba7584b41df9ac1f45bbc86c2eb","modified":1697937298327,"created":1697937298327,"name":"trace","_type":"proto_directory"},{"_id":"pd_69a4183c57794321a1abd56291d98197","parentId":"pd_f683340d77fd4b17beb6475f8594cc26","modified":1697937298329,"created":1697937298329,"name":"v1","_type":"proto_directory"},{"_id":"pd_e37cd4e57c2644faad4995d0408b26ab","parentId":"pd_bf98beab8bcc4834b19f0183d6c68e5b","modified":1697937298331,"created":1697937298331,"name":"v1","_type":"proto_directory"},{"_id":"pd_ae8532f61dff439ca114f868ca5ab002","parentId":"pd_c0b5deb8ba854e44be5bf75ff8ba4b8a","modified":1697937298333,"created":1697937298333,"name":"v1","_type":"proto_directory"},{"_id":"pd_6559757b63c34846b96a29458cfc046c","parentId":"pd_69bd86a455ac406293e13309fc249ddf","modified":1697937298335,"created":1697937298335,"name":"v1","_type":"proto_directory"},{"_id":"pd_537d072fa7e84c52a076de961310cb33","parentId":"pd_82b3afdb97be45d1af42cbea8de5a15d","modified":1697937298337,"created":1697937298337,"name":"v1","_type":"proto_directory"},{"_id":"pd_f96aa06218f6442283416a80c08faf84","parentId":"pd_e9fa3f5afc4046888baba5ea07217340","modified":1697937298320,"created":1697937298320,"name":"v1","_type":"proto_directory"},{"_id":"pd_a86e2e174bc54dbb97d123c1d3b470eb","parentId":"pd_62b0c4df27924f6691092aa12544f509","modified":1697937298323,"created":1697937298323,"name":"v1","_type":"proto_directory"},{"_id":"pd_d4ba712c107749b2b053e0884fd7e3ee","parentId":"pd_6795105eba0a475bab4ff840264f5543","modified":1697937298326,"created":1697937298326,"name":"v1","_type":"proto_directory"},{"_id":"pf_cdcf8aace4f5466f91b88b1845126257","parentId":"pd_69a4183c57794321a1abd56291d98197","modified":1697937298328,"created":1697937298328,"name":"common.proto","protoText":"// Copyright 2019, OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage opentelemetry.proto.common.v1;\n\noption csharp_namespace = \"OpenTelemetry.Proto.Common.V1\";\noption java_multiple_files = true;\noption java_package = \"io.opentelemetry.proto.common.v1\";\noption java_outer_classname = \"CommonProto\";\noption go_package = \"go.opentelemetry.io/proto/otlp/common/v1\";\n\n// AnyValue is used to represent any type of attribute value. AnyValue may contain a\n// primitive value such as a string or integer or it may contain an arbitrary nested\n// object containing arrays, key-value lists and primitives.\nmessage AnyValue {\n  // The value is one of the listed fields. It is valid for all values to be unspecified\n  // in which case this AnyValue is considered to be \"empty\".\n  oneof value {\n    string string_value = 1;\n    bool bool_value = 2;\n    int64 int_value = 3;\n    double double_value = 4;\n    ArrayValue array_value = 5;\n    KeyValueList kvlist_value = 6;\n    bytes bytes_value = 7;\n  }\n}\n\n// ArrayValue is a list of AnyValue messages. We need ArrayValue as a message\n// since oneof in AnyValue does not allow repeated fields.\nmessage ArrayValue {\n  // Array of values. The array may be empty (contain 0 elements).\n  repeated AnyValue values = 1;\n}\n\n// KeyValueList is a list of KeyValue messages. We need KeyValueList as a message\n// since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need\n// a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to\n// avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches\n// are semantically equivalent.\nmessage KeyValueList {\n  // A collection of key/value pairs of key-value pairs. The list may be empty (may\n  // contain 0 elements).\n  // The keys MUST be unique (it is not allowed to have more than one\n  // value with the same key).\n  repeated KeyValue values = 1;\n}\n\n// KeyValue is a key-value pair that is used to store Span attributes, Link\n// attributes, etc.\nmessage KeyValue {\n  string key = 1;\n  AnyValue value = 2;\n}\n\n// InstrumentationScope is a message representing the instrumentation scope information\n// such as the fully qualified name and version. \nmessage InstrumentationScope {\n  // An empty instrumentation scope name means the name is unknown.\n  string name = 1;\n  string version = 2;\n\n  // Additional attributes that describe the scope. [Optional].\n  // Attribute keys MUST be unique (it is not allowed to have more than one\n  // attribute with the same key).\n  repeated KeyValue attributes = 3;\n  uint32 dropped_attributes_count = 4;\n}\n","_type":"proto_file"},{"_id":"pf_92e64d1eda2149f1b48f45f84fb9fd46","parentId":"pd_e37cd4e57c2644faad4995d0408b26ab","modified":1697937298330,"created":1697937298330,"name":"logs.proto","protoText":"// Copyright 2020, OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage opentelemetry.proto.logs.v1;\n\nimport \"opentelemetry/proto/common/v1/common.proto\";\nimport \"opentelemetry/proto/resource/v1/resource.proto\";\n\noption csharp_namespace = \"OpenTelemetry.Proto.Logs.V1\";\noption java_multiple_files = true;\noption java_package = \"io.opentelemetry.proto.logs.v1\";\noption java_outer_classname = \"LogsProto\";\noption go_package = \"go.opentelemetry.io/proto/otlp/logs/v1\";\n\n// LogsData represents the logs data that can be stored in a persistent storage,\n// OR can be embedded by other protocols that transfer OTLP logs data but do not\n// implement the OTLP protocol.\n//\n// The main difference between this message and collector protocol is that\n// in this message there will not be any \"control\" or \"metadata\" specific to\n// OTLP protocol.\n//\n// When new fields are added into this message, the OTLP request MUST be updated\n// as well.\nmessage LogsData {\n  // An array of ResourceLogs.\n  // For data coming from a single resource this array will typically contain\n  // one element. Intermediary nodes that receive data from multiple origins\n  // typically batch the data before forwarding further and in that case this\n  // array will contain multiple elements.\n  repeated ResourceLogs resource_logs = 1;\n}\n\n// A collection of ScopeLogs from a Resource.\nmessage ResourceLogs {\n  reserved 1000;\n\n  // The resource for the logs in this message.\n  // If this field is not set then resource info is unknown.\n  opentelemetry.proto.resource.v1.Resource resource = 1;\n\n  // A list of ScopeLogs that originate from a resource.\n  repeated ScopeLogs scope_logs = 2;\n\n  // The Schema URL, if known. This is the identifier of the Schema that the resource data\n  // is recorded in. To learn more about Schema URL see\n  // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url\n  // This schema_url applies to the data in the \"resource\" field. It does not apply\n  // to the data in the \"scope_logs\" field which have their own schema_url field.\n  string schema_url = 3;\n}\n\n// A collection of Logs produced by a Scope.\nmessage ScopeLogs {\n  // The instrumentation scope information for the logs in this message.\n  // Semantically when InstrumentationScope isn't set, it is equivalent with\n  // an empty instrumentation scope name (unknown).\n  opentelemetry.proto.common.v1.InstrumentationScope scope = 1;\n\n  // A list of log records.\n  repeated LogRecord log_records = 2;\n\n  // The Schema URL, if known. This is the identifier of the Schema that the log data\n  // is recorded in. To learn more about Schema URL see\n  // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url\n  // This schema_url applies to all logs in the \"logs\" field.\n  string schema_url = 3;\n}\n\n// Possible values for LogRecord.SeverityNumber.\nenum SeverityNumber {\n  // UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.\n  SEVERITY_NUMBER_UNSPECIFIED = 0;\n  SEVERITY_NUMBER_TRACE  = 1;\n  SEVERITY_NUMBER_TRACE2 = 2;\n  SEVERITY_NUMBER_TRACE3 = 3;\n  SEVERITY_NUMBER_TRACE4 = 4;\n  SEVERITY_NUMBER_DEBUG  = 5;\n  SEVERITY_NUMBER_DEBUG2 = 6;\n  SEVERITY_NUMBER_DEBUG3 = 7;\n  SEVERITY_NUMBER_DEBUG4 = 8;\n  SEVERITY_NUMBER_INFO   = 9;\n  SEVERITY_NUMBER_INFO2  = 10;\n  SEVERITY_NUMBER_INFO3  = 11;\n  SEVERITY_NUMBER_INFO4  = 12;\n  SEVERITY_NUMBER_WARN   = 13;\n  SEVERITY_NUMBER_WARN2  = 14;\n  SEVERITY_NUMBER_WARN3  = 15;\n  SEVERITY_NUMBER_WARN4  = 16;\n  SEVERITY_NUMBER_ERROR  = 17;\n  SEVERITY_NUMBER_ERROR2 = 18;\n  SEVERITY_NUMBER_ERROR3 = 19;\n  SEVERITY_NUMBER_ERROR4 = 20;\n  SEVERITY_NUMBER_FATAL  = 21;\n  SEVERITY_NUMBER_FATAL2 = 22;\n  SEVERITY_NUMBER_FATAL3 = 23;\n  SEVERITY_NUMBER_FATAL4 = 24;\n}\n\n// LogRecordFlags represents constants used to interpret the\n// LogRecord.flags field, which is protobuf 'fixed32' type and is to\n// be used as bit-fields. Each non-zero value defined in this enum is\n// a bit-mask.  To extract the bit-field, for example, use an\n// expression like:\n//\n//   (logRecord.flags & LOG_RECORD_FLAGS_TRACE_FLAGS_MASK)\n//\nenum LogRecordFlags {\n  // The zero value for the enum. Should not be used for comparisons.\n  // Instead use bitwise \"and\" with the appropriate mask as shown above.\n  LOG_RECORD_FLAGS_DO_NOT_USE = 0;\n\n  // Bits 0-7 are used for trace flags.\n  LOG_RECORD_FLAGS_TRACE_FLAGS_MASK = 0x000000FF;\n\n  // Bits 8-31 are reserved for future use.\n}\n\n// A log record according to OpenTelemetry Log Data Model:\n// https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md\nmessage LogRecord {\n  reserved 4;\n\n  // time_unix_nano is the time when the event occurred.\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n  // Value of 0 indicates unknown or missing timestamp.\n  fixed64 time_unix_nano = 1;\n\n  // Time when the event was observed by the collection system.\n  // For events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging SDK)\n  // this timestamp is typically set at the generation time and is equal to Timestamp.\n  // For events originating externally and collected by OpenTelemetry (e.g. using\n  // Collector) this is the time when OpenTelemetry's code observed the event measured\n  // by the clock of the OpenTelemetry code. This field MUST be set once the event is\n  // observed by OpenTelemetry.\n  //\n  // For converting OpenTelemetry log data to formats that support only one timestamp or\n  // when receiving OpenTelemetry log data by recipients that support only one timestamp\n  // internally the following logic is recommended:\n  //   - Use time_unix_nano if it is present, otherwise use observed_time_unix_nano.\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n  // Value of 0 indicates unknown or missing timestamp.\n  fixed64 observed_time_unix_nano = 11;\n\n  // Numerical value of the severity, normalized to values described in Log Data Model.\n  // [Optional].\n  SeverityNumber severity_number = 2;\n\n  // The severity text (also known as log level). The original string representation as\n  // it is known at the source. [Optional].\n  string severity_text = 3;\n\n  // A value containing the body of the log record. Can be for example a human-readable\n  // string message (including multi-line) describing the event in a free form or it can\n  // be a structured data composed of arrays and maps of other values. [Optional].\n  opentelemetry.proto.common.v1.AnyValue body = 5;\n\n  // Additional attributes that describe the specific event occurrence. [Optional].\n  // Attribute keys MUST be unique (it is not allowed to have more than one\n  // attribute with the same key).\n  repeated opentelemetry.proto.common.v1.KeyValue attributes = 6;\n  uint32 dropped_attributes_count = 7;\n\n  // Flags, a bit field. 8 least significant bits are the trace flags as\n  // defined in W3C Trace Context specification. 24 most significant bits are reserved\n  // and must be set to 0. Readers must not assume that 24 most significant bits\n  // will be zero and must correctly mask the bits when reading 8-bit trace flag (use\n  // flags & LOG_RECORD_FLAGS_TRACE_FLAGS_MASK). [Optional].\n  fixed32 flags = 8;\n\n  // A unique identifier for a trace. All logs from the same trace share\n  // the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR\n  // of length other than 16 bytes is considered invalid (empty string in OTLP/JSON\n  // is zero-length and thus is also invalid).\n  //\n  // This field is optional.\n  //\n  // The receivers SHOULD assume that the log record is not associated with a\n  // trace if any of the following is true:\n  //   - the field is not present,\n  //   - the field contains an invalid value.\n  bytes trace_id = 9;\n\n  // A unique identifier for a span within a trace, assigned when the span\n  // is created. The ID is an 8-byte array. An ID with all zeroes OR of length\n  // other than 8 bytes is considered invalid (empty string in OTLP/JSON\n  // is zero-length and thus is also invalid).\n  //\n  // This field is optional. If the sender specifies a valid span_id then it SHOULD also\n  // specify a valid trace_id.\n  //\n  // The receivers SHOULD assume that the log record is not associated with a\n  // span if any of the following is true:\n  //   - the field is not present,\n  //   - the field contains an invalid value.\n  bytes span_id = 10;\n}\n","_type":"proto_file"},{"_id":"pf_d6c4895b3bc343b18539d494a2c8173e","parentId":"pd_ae8532f61dff439ca114f868ca5ab002","modified":1697937298332,"created":1697937298332,"name":"metrics.proto","protoText":"// Copyright 2019, OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage opentelemetry.proto.metrics.v1;\n\nimport \"opentelemetry/proto/common/v1/common.proto\";\nimport \"opentelemetry/proto/resource/v1/resource.proto\";\n\noption csharp_namespace = \"OpenTelemetry.Proto.Metrics.V1\";\noption java_multiple_files = true;\noption java_package = \"io.opentelemetry.proto.metrics.v1\";\noption java_outer_classname = \"MetricsProto\";\noption go_package = \"go.opentelemetry.io/proto/otlp/metrics/v1\";\n\n// MetricsData represents the metrics data that can be stored in a persistent\n// storage, OR can be embedded by other protocols that transfer OTLP metrics\n// data but do not implement the OTLP protocol.\n//\n// The main difference between this message and collector protocol is that\n// in this message there will not be any \"control\" or \"metadata\" specific to\n// OTLP protocol.\n//\n// When new fields are added into this message, the OTLP request MUST be updated\n// as well.\nmessage MetricsData {\n  // An array of ResourceMetrics.\n  // For data coming from a single resource this array will typically contain\n  // one element. Intermediary nodes that receive data from multiple origins\n  // typically batch the data before forwarding further and in that case this\n  // array will contain multiple elements.\n  repeated ResourceMetrics resource_metrics = 1;\n}\n\n// A collection of ScopeMetrics from a Resource.\nmessage ResourceMetrics {\n  reserved 1000;\n\n  // The resource for the metrics in this message.\n  // If this field is not set then no resource info is known.\n  opentelemetry.proto.resource.v1.Resource resource = 1;\n\n  // A list of metrics that originate from a resource.\n  repeated ScopeMetrics scope_metrics = 2;\n\n  // The Schema URL, if known. This is the identifier of the Schema that the resource data\n  // is recorded in. To learn more about Schema URL see\n  // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url\n  // This schema_url applies to the data in the \"resource\" field. It does not apply\n  // to the data in the \"scope_metrics\" field which have their own schema_url field.\n  string schema_url = 3;\n}\n\n// A collection of Metrics produced by an Scope.\nmessage ScopeMetrics {\n  // The instrumentation scope information for the metrics in this message.\n  // Semantically when InstrumentationScope isn't set, it is equivalent with\n  // an empty instrumentation scope name (unknown).\n  opentelemetry.proto.common.v1.InstrumentationScope scope = 1;\n\n  // A list of metrics that originate from an instrumentation library.\n  repeated Metric metrics = 2;\n\n  // The Schema URL, if known. This is the identifier of the Schema that the metric data\n  // is recorded in. To learn more about Schema URL see\n  // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url\n  // This schema_url applies to all metrics in the \"metrics\" field.\n  string schema_url = 3;\n}\n\n// Defines a Metric which has one or more timeseries.  The following is a\n// brief summary of the Metric data model.  For more details, see:\n//\n//   https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/data-model.md\n//\n//\n// The data model and relation between entities is shown in the\n// diagram below. Here, \"DataPoint\" is the term used to refer to any\n// one of the specific data point value types, and \"points\" is the term used\n// to refer to any one of the lists of points contained in the Metric.\n//\n// - Metric is composed of a metadata and data.\n// - Metadata part contains a name, description, unit.\n// - Data is one of the possible types (Sum, Gauge, Histogram, Summary).\n// - DataPoint contains timestamps, attributes, and one of the possible value type\n//   fields.\n//\n//     Metric\n//  +------------+\n//  |name        |\n//  |description |\n//  |unit        |     +------------------------------------+\n//  |data        |---> |Gauge, Sum, Histogram, Summary, ... |\n//  +------------+     +------------------------------------+\n//\n//    Data [One of Gauge, Sum, Histogram, Summary, ...]\n//  +-----------+\n//  |...        |  // Metadata about the Data.\n//  |points     |--+\n//  +-----------+  |\n//                 |      +---------------------------+\n//                 |      |DataPoint 1                |\n//                 v      |+------+------+   +------+ |\n//              +-----+   ||label |label |...|label | |\n//              |  1  |-->||value1|value2|...|valueN| |\n//              +-----+   |+------+------+   +------+ |\n//              |  .  |   |+-----+                    |\n//              |  .  |   ||value|                    |\n//              |  .  |   |+-----+                    |\n//              |  .  |   +---------------------------+\n//              |  .  |                   .\n//              |  .  |                   .\n//              |  .  |                   .\n//              |  .  |   +---------------------------+\n//              |  .  |   |DataPoint M                |\n//              +-----+   |+------+------+   +------+ |\n//              |  M  |-->||label |label |...|label | |\n//              +-----+   ||value1|value2|...|valueN| |\n//                        |+------+------+   +------+ |\n//                        |+-----+                    |\n//                        ||value|                    |\n//                        |+-----+                    |\n//                        +---------------------------+\n//\n// Each distinct type of DataPoint represents the output of a specific\n// aggregation function, the result of applying the DataPoint's\n// associated function of to one or more measurements.\n//\n// All DataPoint types have three common fields:\n// - Attributes includes key-value pairs associated with the data point\n// - TimeUnixNano is required, set to the end time of the aggregation\n// - StartTimeUnixNano is optional, but strongly encouraged for DataPoints\n//   having an AggregationTemporality field, as discussed below.\n//\n// Both TimeUnixNano and StartTimeUnixNano values are expressed as\n// UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n//\n// # TimeUnixNano\n//\n// This field is required, having consistent interpretation across\n// DataPoint types.  TimeUnixNano is the moment corresponding to when\n// the data point's aggregate value was captured.\n//\n// Data points with the 0 value for TimeUnixNano SHOULD be rejected\n// by consumers.\n//\n// # StartTimeUnixNano\n//\n// StartTimeUnixNano in general allows detecting when a sequence of\n// observations is unbroken.  This field indicates to consumers the\n// start time for points with cumulative and delta\n// AggregationTemporality, and it should be included whenever possible\n// to support correct rate calculation.  Although it may be omitted\n// when the start time is truly unknown, setting StartTimeUnixNano is\n// strongly encouraged.\nmessage Metric {\n  reserved 4, 6, 8;\n\n  // name of the metric, including its DNS name prefix. It must be unique.\n  string name = 1;\n\n  // description of the metric, which can be used in documentation.\n  string description = 2;\n\n  // unit in which the metric value is reported. Follows the format\n  // described by http://unitsofmeasure.org/ucum.html.\n  string unit = 3;\n\n  // Data determines the aggregation type (if any) of the metric, what is the\n  // reported value type for the data points, as well as the relatationship to\n  // the time interval over which they are reported.\n  oneof data {\n    Gauge gauge = 5;\n    Sum sum = 7;\n    Histogram histogram = 9;\n    ExponentialHistogram exponential_histogram = 10;\n    Summary summary = 11;\n  }\n}\n\n// Gauge represents the type of a scalar metric that always exports the\n// \"current value\" for every data point. It should be used for an \"unknown\"\n// aggregation.\n//\n// A Gauge does not support different aggregation temporalities. Given the\n// aggregation is unknown, points cannot be combined using the same\n// aggregation, regardless of aggregation temporalities. Therefore,\n// AggregationTemporality is not included. Consequently, this also means\n// \"StartTimeUnixNano\" is ignored for all data points.\nmessage Gauge {\n  repeated NumberDataPoint data_points = 1;\n}\n\n// Sum represents the type of a scalar metric that is calculated as a sum of all\n// reported measurements over a time interval.\nmessage Sum {\n  repeated NumberDataPoint data_points = 1;\n\n  // aggregation_temporality describes if the aggregator reports delta changes\n  // since last report time, or cumulative changes since a fixed start time.\n  AggregationTemporality aggregation_temporality = 2;\n\n  // If \"true\" means that the sum is monotonic.\n  bool is_monotonic = 3;\n}\n\n// Histogram represents the type of a metric that is calculated by aggregating\n// as a Histogram of all reported measurements over a time interval.\nmessage Histogram {\n  repeated HistogramDataPoint data_points = 1;\n\n  // aggregation_temporality describes if the aggregator reports delta changes\n  // since last report time, or cumulative changes since a fixed start time.\n  AggregationTemporality aggregation_temporality = 2;\n}\n\n// ExponentialHistogram represents the type of a metric that is calculated by aggregating\n// as a ExponentialHistogram of all reported double measurements over a time interval.\nmessage ExponentialHistogram {\n  repeated ExponentialHistogramDataPoint data_points = 1;\n\n  // aggregation_temporality describes if the aggregator reports delta changes\n  // since last report time, or cumulative changes since a fixed start time.\n  AggregationTemporality aggregation_temporality = 2;\n}\n\n// Summary metric data are used to convey quantile summaries,\n// a Prometheus (see: https://prometheus.io/docs/concepts/metric_types/#summary)\n// and OpenMetrics (see: https://github.com/OpenObservability/OpenMetrics/blob/4dbf6075567ab43296eed941037c12951faafb92/protos/prometheus.proto#L45)\n// data type. These data points cannot always be merged in a meaningful way.\n// While they can be useful in some applications, histogram data points are\n// recommended for new applications.\nmessage Summary {\n  repeated SummaryDataPoint data_points = 1;\n}\n\n// AggregationTemporality defines how a metric aggregator reports aggregated\n// values. It describes how those values relate to the time interval over\n// which they are aggregated.\nenum AggregationTemporality {\n  // UNSPECIFIED is the default AggregationTemporality, it MUST not be used.\n  AGGREGATION_TEMPORALITY_UNSPECIFIED = 0;\n\n  // DELTA is an AggregationTemporality for a metric aggregator which reports\n  // changes since last report time. Successive metrics contain aggregation of\n  // values from continuous and non-overlapping intervals.\n  //\n  // The values for a DELTA metric are based only on the time interval\n  // associated with one measurement cycle. There is no dependency on\n  // previous measurements like is the case for CUMULATIVE metrics.\n  //\n  // For example, consider a system measuring the number of requests that\n  // it receives and reports the sum of these requests every second as a\n  // DELTA metric:\n  //\n  //   1. The system starts receiving at time=t_0.\n  //   2. A request is received, the system measures 1 request.\n  //   3. A request is received, the system measures 1 request.\n  //   4. A request is received, the system measures 1 request.\n  //   5. The 1 second collection cycle ends. A metric is exported for the\n  //      number of requests received over the interval of time t_0 to\n  //      t_0+1 with a value of 3.\n  //   6. A request is received, the system measures 1 request.\n  //   7. A request is received, the system measures 1 request.\n  //   8. The 1 second collection cycle ends. A metric is exported for the\n  //      number of requests received over the interval of time t_0+1 to\n  //      t_0+2 with a value of 2.\n  AGGREGATION_TEMPORALITY_DELTA = 1;\n\n  // CUMULATIVE is an AggregationTemporality for a metric aggregator which\n  // reports changes since a fixed start time. This means that current values\n  // of a CUMULATIVE metric depend on all previous measurements since the\n  // start time. Because of this, the sender is required to retain this state\n  // in some form. If this state is lost or invalidated, the CUMULATIVE metric\n  // values MUST be reset and a new fixed start time following the last\n  // reported measurement time sent MUST be used.\n  //\n  // For example, consider a system measuring the number of requests that\n  // it receives and reports the sum of these requests every second as a\n  // CUMULATIVE metric:\n  //\n  //   1. The system starts receiving at time=t_0.\n  //   2. A request is received, the system measures 1 request.\n  //   3. A request is received, the system measures 1 request.\n  //   4. A request is received, the system measures 1 request.\n  //   5. The 1 second collection cycle ends. A metric is exported for the\n  //      number of requests received over the interval of time t_0 to\n  //      t_0+1 with a value of 3.\n  //   6. A request is received, the system measures 1 request.\n  //   7. A request is received, the system measures 1 request.\n  //   8. The 1 second collection cycle ends. A metric is exported for the\n  //      number of requests received over the interval of time t_0 to\n  //      t_0+2 with a value of 5.\n  //   9. The system experiences a fault and loses state.\n  //   10. The system recovers and resumes receiving at time=t_1.\n  //   11. A request is received, the system measures 1 request.\n  //   12. The 1 second collection cycle ends. A metric is exported for the\n  //      number of requests received over the interval of time t_1 to\n  //      t_0+1 with a value of 1.\n  //\n  // Note: Even though, when reporting changes since last report time, using\n  // CUMULATIVE is valid, it is not recommended. This may cause problems for\n  // systems that do not use start_time to determine when the aggregation\n  // value was reset (e.g. Prometheus).\n  AGGREGATION_TEMPORALITY_CUMULATIVE = 2;\n}\n\n// DataPointFlags is defined as a protobuf 'uint32' type and is to be used as a\n// bit-field representing 32 distinct boolean flags.  Each flag defined in this\n// enum is a bit-mask.  To test the presence of a single flag in the flags of\n// a data point, for example, use an expression like:\n//\n//   (point.flags & DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK) == DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\n//\nenum DataPointFlags {\n  // The zero value for the enum. Should not be used for comparisons.\n  // Instead use bitwise \"and\" with the appropriate mask as shown above.\n  DATA_POINT_FLAGS_DO_NOT_USE = 0;\n\n  // This DataPoint is valid but has no recorded value.  This value\n  // SHOULD be used to reflect explicitly missing data in a series, as\n  // for an equivalent to the Prometheus \"staleness marker\".\n  DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK = 1;\n\n  // Bits 2-31 are reserved for future use.\n}\n\n// NumberDataPoint is a single data point in a timeseries that describes the\n// time-varying scalar value of a metric.\nmessage NumberDataPoint {\n  reserved 1;\n\n  // The set of key/value pairs that uniquely identify the timeseries from\n  // where this point belongs. The list may be empty (may contain 0 elements).\n  // Attribute keys MUST be unique (it is not allowed to have more than one\n  // attribute with the same key).\n  repeated opentelemetry.proto.common.v1.KeyValue attributes = 7;\n\n  // StartTimeUnixNano is optional but strongly encouraged, see the\n  // the detailed comments above Metric.\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January\n  // 1970.\n  fixed64 start_time_unix_nano = 2;\n\n  // TimeUnixNano is required, see the detailed comments above Metric.\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January\n  // 1970.\n  fixed64 time_unix_nano = 3;\n\n  // The value itself.  A point is considered invalid when one of the recognized\n  // value fields is not present inside this oneof.\n  oneof value {\n    double as_double = 4;\n    sfixed64 as_int = 6;\n  }\n\n  // (Optional) List of exemplars collected from\n  // measurements that were used to form the data point\n  repeated Exemplar exemplars = 5;\n\n  // Flags that apply to this specific data point.  See DataPointFlags\n  // for the available flags and their meaning.\n  uint32 flags = 8;\n}\n\n// HistogramDataPoint is a single data point in a timeseries that describes the\n// time-varying values of a Histogram. A Histogram contains summary statistics\n// for a population of values, it may optionally contain the distribution of\n// those values across a set of buckets.\n//\n// If the histogram contains the distribution of values, then both\n// \"explicit_bounds\" and \"bucket counts\" fields must be defined.\n// If the histogram does not contain the distribution of values, then both\n// \"explicit_bounds\" and \"bucket_counts\" must be omitted and only \"count\" and\n// \"sum\" are known.\nmessage HistogramDataPoint {\n  reserved 1;\n\n  // The set of key/value pairs that uniquely identify the timeseries from\n  // where this point belongs. The list may be empty (may contain 0 elements).\n  // Attribute keys MUST be unique (it is not allowed to have more than one\n  // attribute with the same key).\n  repeated opentelemetry.proto.common.v1.KeyValue attributes = 9;\n\n  // StartTimeUnixNano is optional but strongly encouraged, see the\n  // the detailed comments above Metric.\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January\n  // 1970.\n  fixed64 start_time_unix_nano = 2;\n\n  // TimeUnixNano is required, see the detailed comments above Metric.\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January\n  // 1970.\n  fixed64 time_unix_nano = 3;\n\n  // count is the number of values in the population. Must be non-negative. This\n  // value must be equal to the sum of the \"count\" fields in buckets if a\n  // histogram is provided.\n  fixed64 count = 4;\n\n  // sum of the values in the population. If count is zero then this field\n  // must be zero.\n  //\n  // Note: Sum should only be filled out when measuring non-negative discrete\n  // events, and is assumed to be monotonic over the values of these events.\n  // Negative events *can* be recorded, but sum should not be filled out when\n  // doing so.  This is specifically to enforce compatibility w/ OpenMetrics,\n  // see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram\n  optional double sum = 5;\n\n  // bucket_counts is an optional field contains the count values of histogram\n  // for each bucket.\n  //\n  // The sum of the bucket_counts must equal the value in the count field.\n  //\n  // The number of elements in bucket_counts array must be by one greater than\n  // the number of elements in explicit_bounds array.\n  repeated fixed64 bucket_counts = 6;\n\n  // explicit_bounds specifies buckets with explicitly defined bounds for values.\n  //\n  // The boundaries for bucket at index i are:\n  //\n  // (-infinity, explicit_bounds[i]] for i == 0\n  // (explicit_bounds[i-1], explicit_bounds[i]] for 0 < i < size(explicit_bounds)\n  // (explicit_bounds[i-1], +infinity) for i == size(explicit_bounds)\n  //\n  // The values in the explicit_bounds array must be strictly increasing.\n  //\n  // Histogram buckets are inclusive of their upper boundary, except the last\n  // bucket where the boundary is at infinity. This format is intentionally\n  // compatible with the OpenMetrics histogram definition.\n  repeated double explicit_bounds = 7;\n\n  // (Optional) List of exemplars collected from\n  // measurements that were used to form the data point\n  repeated Exemplar exemplars = 8;\n\n  // Flags that apply to this specific data point.  See DataPointFlags\n  // for the available flags and their meaning.\n  uint32 flags = 10;\n\n  // min is the minimum value over (start_time, end_time].\n  optional double min = 11;\n\n  // max is the maximum value over (start_time, end_time].\n  optional double max = 12;\n}\n\n// ExponentialHistogramDataPoint is a single data point in a timeseries that describes the\n// time-varying values of a ExponentialHistogram of double values. A ExponentialHistogram contains\n// summary statistics for a population of values, it may optionally contain the\n// distribution of those values across a set of buckets.\n//\nmessage ExponentialHistogramDataPoint {\n  // The set of key/value pairs that uniquely identify the timeseries from\n  // where this point belongs. The list may be empty (may contain 0 elements).\n  // Attribute keys MUST be unique (it is not allowed to have more than one\n  // attribute with the same key).\n  repeated opentelemetry.proto.common.v1.KeyValue attributes = 1;\n\n  // StartTimeUnixNano is optional but strongly encouraged, see the\n  // the detailed comments above Metric.\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January\n  // 1970.\n  fixed64 start_time_unix_nano = 2;\n\n  // TimeUnixNano is required, see the detailed comments above Metric.\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January\n  // 1970.\n  fixed64 time_unix_nano = 3;\n\n  // count is the number of values in the population. Must be\n  // non-negative. This value must be equal to the sum of the \"bucket_counts\"\n  // values in the positive and negative Buckets plus the \"zero_count\" field.\n  fixed64 count = 4;\n\n  // sum of the values in the population. If count is zero then this field\n  // must be zero.\n  //\n  // Note: Sum should only be filled out when measuring non-negative discrete\n  // events, and is assumed to be monotonic over the values of these events.\n  // Negative events *can* be recorded, but sum should not be filled out when\n  // doing so.  This is specifically to enforce compatibility w/ OpenMetrics,\n  // see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram\n  optional double sum = 5;\n  \n  // scale describes the resolution of the histogram.  Boundaries are\n  // located at powers of the base, where:\n  //\n  //   base = (2^(2^-scale))\n  //\n  // The histogram bucket identified by `index`, a signed integer,\n  // contains values that are greater than (base^index) and\n  // less than or equal to (base^(index+1)).\n  //\n  // The positive and negative ranges of the histogram are expressed\n  // separately.  Negative values are mapped by their absolute value\n  // into the negative range using the same scale as the positive range.\n  //\n  // scale is not restricted by the protocol, as the permissible\n  // values depend on the range of the data.\n  sint32 scale = 6;\n\n  // zero_count is the count of values that are either exactly zero or\n  // within the region considered zero by the instrumentation at the\n  // tolerated degree of precision.  This bucket stores values that\n  // cannot be expressed using the standard exponential formula as\n  // well as values that have been rounded to zero.\n  //\n  // Implementations MAY consider the zero bucket to have probability\n  // mass equal to (zero_count / count).\n  fixed64 zero_count = 7;\n\n  // positive carries the positive range of exponential bucket counts.\n  Buckets positive = 8;\n\n  // negative carries the negative range of exponential bucket counts.\n  Buckets negative = 9;\n\n  // Buckets are a set of bucket counts, encoded in a contiguous array\n  // of counts.\n  message Buckets {\n    // Offset is the bucket index of the first entry in the bucket_counts array.\n    // \n    // Note: This uses a varint encoding as a simple form of compression.\n    sint32 offset = 1;\n\n    // bucket_counts is an array of count values, where bucket_counts[i] carries\n    // the count of the bucket at index (offset+i). bucket_counts[i] is the count\n    // of values greater than base^(offset+i) and less than or equal to\n    // base^(offset+i+1).\n    //\n    // Note: By contrast, the explicit HistogramDataPoint uses\n    // fixed64.  This field is expected to have many buckets,\n    // especially zeros, so uint64 has been selected to ensure\n    // varint encoding.\n    repeated uint64 bucket_counts = 2;\n  } \n\n  // Flags that apply to this specific data point.  See DataPointFlags\n  // for the available flags and their meaning.\n  uint32 flags = 10;\n\n  // (Optional) List of exemplars collected from\n  // measurements that were used to form the data point\n  repeated Exemplar exemplars = 11;\n\n  // min is the minimum value over (start_time, end_time].\n  optional double min = 12;\n\n  // max is the maximum value over (start_time, end_time].\n  optional double max = 13;\n\n  // ZeroThreshold may be optionally set to convey the width of the zero\n  // region. Where the zero region is defined as the closed interval\n  // [-ZeroThreshold, ZeroThreshold].\n  // When ZeroThreshold is 0, zero count bucket stores values that cannot be\n  // expressed using the standard exponential formula as well as values that\n  // have been rounded to zero.\n  double zero_threshold = 14;\n}\n\n// SummaryDataPoint is a single data point in a timeseries that describes the\n// time-varying values of a Summary metric.\nmessage SummaryDataPoint {\n  reserved 1;\n\n  // The set of key/value pairs that uniquely identify the timeseries from\n  // where this point belongs. The list may be empty (may contain 0 elements).\n  // Attribute keys MUST be unique (it is not allowed to have more than one\n  // attribute with the same key).\n  repeated opentelemetry.proto.common.v1.KeyValue attributes = 7;\n\n  // StartTimeUnixNano is optional but strongly encouraged, see the\n  // the detailed comments above Metric.\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January\n  // 1970.\n  fixed64 start_time_unix_nano = 2;\n\n  // TimeUnixNano is required, see the detailed comments above Metric.\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January\n  // 1970.\n  fixed64 time_unix_nano = 3;\n\n  // count is the number of values in the population. Must be non-negative.\n  fixed64 count = 4;\n\n  // sum of the values in the population. If count is zero then this field\n  // must be zero.\n  //\n  // Note: Sum should only be filled out when measuring non-negative discrete\n  // events, and is assumed to be monotonic over the values of these events.\n  // Negative events *can* be recorded, but sum should not be filled out when\n  // doing so.  This is specifically to enforce compatibility w/ OpenMetrics,\n  // see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary\n  double sum = 5;\n\n  // Represents the value at a given quantile of a distribution.\n  //\n  // To record Min and Max values following conventions are used:\n  // - The 1.0 quantile is equivalent to the maximum value observed.\n  // - The 0.0 quantile is equivalent to the minimum value observed.\n  //\n  // See the following issue for more context:\n  // https://github.com/open-telemetry/opentelemetry-proto/issues/125\n  message ValueAtQuantile {\n    // The quantile of a distribution. Must be in the interval\n    // [0.0, 1.0].\n    double quantile = 1;\n\n    // The value at the given quantile of a distribution.\n    //\n    // Quantile values must NOT be negative.\n    double value = 2;\n  }\n\n  // (Optional) list of values at different quantiles of the distribution calculated\n  // from the current snapshot. The quantiles must be strictly increasing.\n  repeated ValueAtQuantile quantile_values = 6;\n\n  // Flags that apply to this specific data point.  See DataPointFlags\n  // for the available flags and their meaning.\n  uint32 flags = 8;\n}\n\n// A representation of an exemplar, which is a sample input measurement.\n// Exemplars also hold information about the environment when the measurement\n// was recorded, for example the span and trace ID of the active span when the\n// exemplar was recorded.\nmessage Exemplar {\n  reserved 1;\n\n  // The set of key/value pairs that were filtered out by the aggregator, but\n  // recorded alongside the original measurement. Only key/value pairs that were\n  // filtered out by the aggregator should be included\n  repeated opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;\n\n  // time_unix_nano is the exact time when this exemplar was recorded\n  //\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January\n  // 1970.\n  fixed64 time_unix_nano = 2;\n\n  // The value of the measurement that was recorded. An exemplar is\n  // considered invalid when one of the recognized value fields is not present\n  // inside this oneof.\n  oneof value {\n    double as_double = 3;\n    sfixed64 as_int = 6;\n  }\n\n  // (Optional) Span ID of the exemplar trace.\n  // span_id may be missing if the measurement is not recorded inside a trace\n  // or if the trace is not sampled.\n  bytes span_id = 4;\n\n  // (Optional) Trace ID of the exemplar trace.\n  // trace_id may be missing if the measurement is not recorded inside a trace\n  // or if the trace is not sampled.\n  bytes trace_id = 5;\n}\n","_type":"proto_file"},{"_id":"pf_79a8a417f09f40929b02a8192b7fdf61","parentId":"pd_6559757b63c34846b96a29458cfc046c","modified":1697937298335,"created":1697937298335,"name":"resource.proto","protoText":"// Copyright 2019, OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage opentelemetry.proto.resource.v1;\n\nimport \"opentelemetry/proto/common/v1/common.proto\";\n\noption csharp_namespace = \"OpenTelemetry.Proto.Resource.V1\";\noption java_multiple_files = true;\noption java_package = \"io.opentelemetry.proto.resource.v1\";\noption java_outer_classname = \"ResourceProto\";\noption go_package = \"go.opentelemetry.io/proto/otlp/resource/v1\";\n\n// Resource information.\nmessage Resource {\n  // Set of attributes that describe the resource.\n  // Attribute keys MUST be unique (it is not allowed to have more than one\n  // attribute with the same key).\n  repeated opentelemetry.proto.common.v1.KeyValue attributes = 1;\n\n  // dropped_attributes_count is the number of dropped attributes. If the value is 0, then\n  // no attributes were dropped.\n  uint32 dropped_attributes_count = 2;\n}\n","_type":"proto_file"},{"_id":"pf_a0f9a846c19342e49ab9bb6b38de1e45","parentId":"pd_537d072fa7e84c52a076de961310cb33","modified":1697937298336,"created":1697937298336,"name":"trace.proto","protoText":"// Copyright 2019, OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage opentelemetry.proto.trace.v1;\n\nimport \"opentelemetry/proto/common/v1/common.proto\";\nimport \"opentelemetry/proto/resource/v1/resource.proto\";\n\noption csharp_namespace = \"OpenTelemetry.Proto.Trace.V1\";\noption java_multiple_files = true;\noption java_package = \"io.opentelemetry.proto.trace.v1\";\noption java_outer_classname = \"TraceProto\";\noption go_package = \"go.opentelemetry.io/proto/otlp/trace/v1\";\n\n// TracesData represents the traces data that can be stored in a persistent storage,\n// OR can be embedded by other protocols that transfer OTLP traces data but do\n// not implement the OTLP protocol.\n//\n// The main difference between this message and collector protocol is that\n// in this message there will not be any \"control\" or \"metadata\" specific to\n// OTLP protocol.\n//\n// When new fields are added into this message, the OTLP request MUST be updated\n// as well.\nmessage TracesData {\n  // An array of ResourceSpans.\n  // For data coming from a single resource this array will typically contain\n  // one element. Intermediary nodes that receive data from multiple origins\n  // typically batch the data before forwarding further and in that case this\n  // array will contain multiple elements.\n  repeated ResourceSpans resource_spans = 1;\n}\n\n// A collection of ScopeSpans from a Resource.\nmessage ResourceSpans {\n  reserved 1000;\n\n  // The resource for the spans in this message.\n  // If this field is not set then no resource info is known.\n  opentelemetry.proto.resource.v1.Resource resource = 1;\n\n  // A list of ScopeSpans that originate from a resource.\n  repeated ScopeSpans scope_spans = 2;\n\n  // The Schema URL, if known. This is the identifier of the Schema that the resource data\n  // is recorded in. To learn more about Schema URL see\n  // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url\n  // This schema_url applies to the data in the \"resource\" field. It does not apply\n  // to the data in the \"scope_spans\" field which have their own schema_url field.\n  string schema_url = 3;\n}\n\n// A collection of Spans produced by an InstrumentationScope.\nmessage ScopeSpans {\n  // The instrumentation scope information for the spans in this message.\n  // Semantically when InstrumentationScope isn't set, it is equivalent with\n  // an empty instrumentation scope name (unknown).\n  opentelemetry.proto.common.v1.InstrumentationScope scope = 1;\n\n  // A list of Spans that originate from an instrumentation scope.\n  repeated Span spans = 2;\n\n  // The Schema URL, if known. This is the identifier of the Schema that the span data\n  // is recorded in. To learn more about Schema URL see\n  // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url\n  // This schema_url applies to all spans and span events in the \"spans\" field.\n  string schema_url = 3;\n}\n\n// A Span represents a single operation performed by a single component of the system.\n//\n// The next available field id is 17.\nmessage Span {\n  // A unique identifier for a trace. All spans from the same trace share\n  // the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR\n  // of length other than 16 bytes is considered invalid (empty string in OTLP/JSON\n  // is zero-length and thus is also invalid).\n  //\n  // This field is required.\n  bytes trace_id = 1;\n\n  // A unique identifier for a span within a trace, assigned when the span\n  // is created. The ID is an 8-byte array. An ID with all zeroes OR of length\n  // other than 8 bytes is considered invalid (empty string in OTLP/JSON\n  // is zero-length and thus is also invalid).\n  //\n  // This field is required.\n  bytes span_id = 2;\n\n  // trace_state conveys information about request position in multiple distributed tracing graphs.\n  // It is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header\n  // See also https://github.com/w3c/distributed-tracing for more details about this field.\n  string trace_state = 3;\n\n  // The `span_id` of this span's parent span. If this is a root span, then this\n  // field must be empty. The ID is an 8-byte array.\n  bytes parent_span_id = 4;\n\n  // Flags, a bit field. 8 least significant bits are the trace\n  // flags as defined in W3C Trace Context specification. Readers\n  // MUST not assume that 24 most significant bits will be zero.\n  // To read the 8-bit W3C trace flag, use `flags & SPAN_FLAGS_TRACE_FLAGS_MASK`.\n  //\n  // When creating span messages, if the message is logically forwarded from another source\n  // with an equivalent flags fields (i.e., usually another OTLP span message), the field SHOULD\n  // be copied as-is. If creating from a source that does not have an equivalent flags field\n  // (such as a runtime representation of an OpenTelemetry span), the high 24 bits MUST\n  // be set to zero.\n  //\n  // [Optional].\n  //\n  // See https://www.w3.org/TR/trace-context-2/#trace-flags for the flag definitions.\n  fixed32 flags = 16;\n\n  // A description of the span's operation.\n  //\n  // For example, the name can be a qualified method name or a file name\n  // and a line number where the operation is called. A best practice is to use\n  // the same display name at the same call point in an application.\n  // This makes it easier to correlate spans in different traces.\n  //\n  // This field is semantically required to be set to non-empty string.\n  // Empty value is equivalent to an unknown span name.\n  //\n  // This field is required.\n  string name = 5;\n\n  // SpanKind is the type of span. Can be used to specify additional relationships between spans\n  // in addition to a parent/child relationship.\n  enum SpanKind {\n    // Unspecified. Do NOT use as default.\n    // Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.\n    SPAN_KIND_UNSPECIFIED = 0;\n\n    // Indicates that the span represents an internal operation within an application,\n    // as opposed to an operation happening at the boundaries. Default value.\n    SPAN_KIND_INTERNAL = 1;\n\n    // Indicates that the span covers server-side handling of an RPC or other\n    // remote network request.\n    SPAN_KIND_SERVER = 2;\n\n    // Indicates that the span describes a request to some remote service.\n    SPAN_KIND_CLIENT = 3;\n\n    // Indicates that the span describes a producer sending a message to a broker.\n    // Unlike CLIENT and SERVER, there is often no direct critical path latency relationship\n    // between producer and consumer spans. A PRODUCER span ends when the message was accepted\n    // by the broker while the logical processing of the message might span a much longer time.\n    SPAN_KIND_PRODUCER = 4;\n\n    // Indicates that the span describes consumer receiving a message from a broker.\n    // Like the PRODUCER kind, there is often no direct critical path latency relationship\n    // between producer and consumer spans.\n    SPAN_KIND_CONSUMER = 5;\n  }\n\n  // Distinguishes between spans generated in a particular context. For example,\n  // two spans with the same name may be distinguished using `CLIENT` (caller)\n  // and `SERVER` (callee) to identify queueing latency associated with the span.\n  SpanKind kind = 6;\n\n  // start_time_unix_nano is the start time of the span. On the client side, this is the time\n  // kept by the local machine where the span execution starts. On the server side, this\n  // is the time when the server's application handler starts running.\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n  //\n  // This field is semantically required and it is expected that end_time >= start_time.\n  fixed64 start_time_unix_nano = 7;\n\n  // end_time_unix_nano is the end time of the span. On the client side, this is the time\n  // kept by the local machine where the span execution ends. On the server side, this\n  // is the time when the server application handler stops running.\n  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n  //\n  // This field is semantically required and it is expected that end_time >= start_time.\n  fixed64 end_time_unix_nano = 8;\n\n  // attributes is a collection of key/value pairs. Note, global attributes\n  // like server name can be set using the resource API. Examples of attributes:\n  //\n  //     \"/http/user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n  //     \"/http/server_latency\": 300\n  //     \"example.com/myattribute\": true\n  //     \"example.com/score\": 10.239\n  //\n  // The OpenTelemetry API specification further restricts the allowed value types:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute\n  // Attribute keys MUST be unique (it is not allowed to have more than one\n  // attribute with the same key).\n  repeated opentelemetry.proto.common.v1.KeyValue attributes = 9;\n\n  // dropped_attributes_count is the number of attributes that were discarded. Attributes\n  // can be discarded because their keys are too long or because there are too many\n  // attributes. If this value is 0, then no attributes were dropped.\n  uint32 dropped_attributes_count = 10;\n\n  // Event is a time-stamped annotation of the span, consisting of user-supplied\n  // text description and key-value pairs.\n  message Event {\n    // time_unix_nano is the time the event occurred.\n    fixed64 time_unix_nano = 1;\n\n    // name of the event.\n    // This field is semantically required to be set to non-empty string.\n    string name = 2;\n\n    // attributes is a collection of attribute key/value pairs on the event.\n    // Attribute keys MUST be unique (it is not allowed to have more than one\n    // attribute with the same key).\n    repeated opentelemetry.proto.common.v1.KeyValue attributes = 3;\n\n    // dropped_attributes_count is the number of dropped attributes. If the value is 0,\n    // then no attributes were dropped.\n    uint32 dropped_attributes_count = 4;\n  }\n\n  // events is a collection of Event items.\n  repeated Event events = 11;\n\n  // dropped_events_count is the number of dropped events. If the value is 0, then no\n  // events were dropped.\n  uint32 dropped_events_count = 12;\n\n  // A pointer from the current span to another span in the same trace or in a\n  // different trace. For example, this can be used in batching operations,\n  // where a single batch handler processes multiple requests from different\n  // traces or when the handler receives a request from a different project.\n  message Link {\n    // A unique identifier of a trace that this linked span is part of. The ID is a\n    // 16-byte array.\n    bytes trace_id = 1;\n\n    // A unique identifier for the linked span. The ID is an 8-byte array.\n    bytes span_id = 2;\n\n    // The trace_state associated with the link.\n    string trace_state = 3;\n\n    // attributes is a collection of attribute key/value pairs on the link.\n    // Attribute keys MUST be unique (it is not allowed to have more than one\n    // attribute with the same key).\n    repeated opentelemetry.proto.common.v1.KeyValue attributes = 4;\n\n    // dropped_attributes_count is the number of dropped attributes. If the value is 0,\n    // then no attributes were dropped.\n    uint32 dropped_attributes_count = 5;\n\n    // Flags, a bit field. 8 least significant bits are the trace\n    // flags as defined in W3C Trace Context specification. Readers\n    // MUST not assume that 24 most significant bits will be zero.\n    // When creating new spans, the most-significant 24-bits MUST be\n    // zero.  To read the 8-bit W3C trace flag (use flags &\n    // SPAN_FLAGS_TRACE_FLAGS_MASK).  [Optional].\n    //\n    // See https://www.w3.org/TR/trace-context-2/#trace-flags for the flag definitions.\n    fixed32 flags = 6;\n  }\n\n  // links is a collection of Links, which are references from this span to a span\n  // in the same or different trace.\n  repeated Link links = 13;\n\n  // dropped_links_count is the number of dropped links after the maximum size was\n  // enforced. If this value is 0, then no links were dropped.\n  uint32 dropped_links_count = 14;\n\n  // An optional final status for this span. Semantically when Status isn't set, it means\n  // span's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0).\n  Status status = 15;\n}\n\n// The Status type defines a logical error model that is suitable for different\n// programming environments, including REST APIs and RPC APIs.\nmessage Status {\n  reserved 1;\n\n  // A developer-facing human readable error message.\n  string message = 2;\n\n  // For the semantics of status codes see\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status\n  enum StatusCode {\n    // The default status.\n    STATUS_CODE_UNSET               = 0;\n    // The Span has been validated by an Application developer or Operator to \n    // have completed successfully.\n    STATUS_CODE_OK                  = 1;\n    // The Span contains an error.\n    STATUS_CODE_ERROR               = 2;\n  };\n\n  // The status code.\n  StatusCode code = 3;\n}\n\n// SpanFlags represents constants used to interpret the\n// Span.flags field, which is protobuf 'fixed32' type and is to\n// be used as bit-fields. Each non-zero value defined in this enum is\n// a bit-mask.  To extract the bit-field, for example, use an\n// expression like:\n//\n//   (span.flags & SPAN_FLAGS_TRACE_FLAGS_MASK)\n//\n// See https://www.w3.org/TR/trace-context-2/#trace-flags for the flag definitions.\n//\n// Note that Span flags were introduced in version 1.1 of the\n// OpenTelemetry protocol.  Older Span producers do not set this\n// field, consequently consumers should not rely on the absence of a\n// particular flag bit to indicate the presence of a particular feature.\nenum SpanFlags {\n  // The zero value for the enum. Should not be used for comparisons.\n  // Instead use bitwise \"and\" with the appropriate mask as shown above.\n  SPAN_FLAGS_DO_NOT_USE = 0;\n\n  // Bits 0-7 are used for trace flags.\n  SPAN_FLAGS_TRACE_FLAGS_MASK = 0x000000FF;\n\n  // Bits 8-31 are reserved for future use.\n}\n","_type":"proto_file"},{"_id":"pf_10211ff4dbda416b84bca7a2803a75f8","parentId":"pd_f96aa06218f6442283416a80c08faf84","modified":1697937298319,"created":1697937298319,"name":"logs_service.proto","protoText":"// Copyright 2020, OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage opentelemetry.proto.collector.logs.v1;\n\nimport \"opentelemetry/proto/logs/v1/logs.proto\";\n\noption csharp_namespace = \"OpenTelemetry.Proto.Collector.Logs.V1\";\noption java_multiple_files = true;\noption java_package = \"io.opentelemetry.proto.collector.logs.v1\";\noption java_outer_classname = \"LogsServiceProto\";\noption go_package = \"go.opentelemetry.io/proto/otlp/collector/logs/v1\";\n\n// Service that can be used to push logs between one Application instrumented with\n// OpenTelemetry and an collector, or between an collector and a central collector (in this\n// case logs are sent/received to/from multiple Applications).\nservice LogsService {\n  // For performance reasons, it is recommended to keep this RPC\n  // alive for the entire life of the application.\n  rpc Export(ExportLogsServiceRequest) returns (ExportLogsServiceResponse) {}\n}\n\nmessage ExportLogsServiceRequest {\n  // An array of ResourceLogs.\n  // For data coming from a single resource this array will typically contain one\n  // element. Intermediary nodes (such as OpenTelemetry Collector) that receive\n  // data from multiple origins typically batch the data before forwarding further and\n  // in that case this array will contain multiple elements.\n  repeated opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;\n}\n\nmessage ExportLogsServiceResponse {\n  // The details of a partially successful export request.\n  //\n  // If the request is only partially accepted\n  // (i.e. when the server accepts only parts of the data and rejects the rest)\n  // the server MUST initialize the `partial_success` field and MUST\n  // set the `rejected_<signal>` with the number of items it rejected.\n  //\n  // Servers MAY also make use of the `partial_success` field to convey\n  // warnings/suggestions to senders even when the request was fully accepted.\n  // In such cases, the `rejected_<signal>` MUST have a value of `0` and\n  // the `error_message` MUST be non-empty.\n  //\n  // A `partial_success` message with an empty value (rejected_<signal> = 0 and\n  // `error_message` = \"\") is equivalent to it not being set/present. Senders\n  // SHOULD interpret it the same way as in the full success case.\n  ExportLogsPartialSuccess partial_success = 1;\n}\n\nmessage ExportLogsPartialSuccess {\n  // The number of rejected log records.\n  //\n  // A `rejected_<signal>` field holding a `0` value indicates that the\n  // request was fully accepted.\n  int64 rejected_log_records = 1;\n\n  // A developer-facing human-readable message in English. It should be used\n  // either to explain why the server rejected parts of the data during a partial\n  // success or to convey warnings/suggestions during a full success. The message\n  // should offer guidance on how users can address such issues.\n  //\n  // error_message is an optional field. An error_message with an empty value\n  // is equivalent to it not being set.\n  string error_message = 2;\n}\n","_type":"proto_file"},{"_id":"pf_44a5211caf98483996db3c8dac184414","parentId":"pd_a86e2e174bc54dbb97d123c1d3b470eb","modified":1697937298322,"created":1697937298322,"name":"metrics_service.proto","protoText":"// Copyright 2019, OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage opentelemetry.proto.collector.metrics.v1;\n\nimport \"opentelemetry/proto/metrics/v1/metrics.proto\";\n\noption csharp_namespace = \"OpenTelemetry.Proto.Collector.Metrics.V1\";\noption java_multiple_files = true;\noption java_package = \"io.opentelemetry.proto.collector.metrics.v1\";\noption java_outer_classname = \"MetricsServiceProto\";\noption go_package = \"go.opentelemetry.io/proto/otlp/collector/metrics/v1\";\n\n// Service that can be used to push metrics between one Application\n// instrumented with OpenTelemetry and a collector, or between a collector and a\n// central collector.\nservice MetricsService {\n  // For performance reasons, it is recommended to keep this RPC\n  // alive for the entire life of the application.\n  rpc Export(ExportMetricsServiceRequest) returns (ExportMetricsServiceResponse) {}\n}\n\nmessage ExportMetricsServiceRequest {\n  // An array of ResourceMetrics.\n  // For data coming from a single resource this array will typically contain one\n  // element. Intermediary nodes (such as OpenTelemetry Collector) that receive\n  // data from multiple origins typically batch the data before forwarding further and\n  // in that case this array will contain multiple elements.\n  repeated opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;\n}\n\nmessage ExportMetricsServiceResponse {\n  // The details of a partially successful export request.\n  //\n  // If the request is only partially accepted\n  // (i.e. when the server accepts only parts of the data and rejects the rest)\n  // the server MUST initialize the `partial_success` field and MUST\n  // set the `rejected_<signal>` with the number of items it rejected.\n  //\n  // Servers MAY also make use of the `partial_success` field to convey\n  // warnings/suggestions to senders even when the request was fully accepted.\n  // In such cases, the `rejected_<signal>` MUST have a value of `0` and\n  // the `error_message` MUST be non-empty.\n  //\n  // A `partial_success` message with an empty value (rejected_<signal> = 0 and\n  // `error_message` = \"\") is equivalent to it not being set/present. Senders\n  // SHOULD interpret it the same way as in the full success case.\n  ExportMetricsPartialSuccess partial_success = 1;\n}\n\nmessage ExportMetricsPartialSuccess {\n  // The number of rejected data points.\n  //\n  // A `rejected_<signal>` field holding a `0` value indicates that the\n  // request was fully accepted.\n  int64 rejected_data_points = 1;\n\n  // A developer-facing human-readable message in English. It should be used\n  // either to explain why the server rejected parts of the data during a partial\n  // success or to convey warnings/suggestions during a full success. The message\n  // should offer guidance on how users can address such issues.\n  //\n  // error_message is an optional field. An error_message with an empty value\n  // is equivalent to it not being set.\n  string error_message = 2;\n}\n","_type":"proto_file"},{"_id":"pf_42299af8534541beac867b0f454daccf","parentId":"pd_d4ba712c107749b2b053e0884fd7e3ee","modified":1697937298325,"created":1697937298325,"name":"trace_service.proto","protoText":"// Copyright 2019, OpenTelemetry Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nsyntax = \"proto3\";\n\npackage opentelemetry.proto.collector.trace.v1;\n\nimport \"opentelemetry/proto/trace/v1/trace.proto\";\n\noption csharp_namespace = \"OpenTelemetry.Proto.Collector.Trace.V1\";\noption java_multiple_files = true;\noption java_package = \"io.opentelemetry.proto.collector.trace.v1\";\noption java_outer_classname = \"TraceServiceProto\";\noption go_package = \"go.opentelemetry.io/proto/otlp/collector/trace/v1\";\n\n// Service that can be used to push spans between one Application instrumented with\n// OpenTelemetry and a collector, or between a collector and a central collector (in this\n// case spans are sent/received to/from multiple Applications).\nservice TraceService {\n  // For performance reasons, it is recommended to keep this RPC\n  // alive for the entire life of the application.\n  rpc Export(ExportTraceServiceRequest) returns (ExportTraceServiceResponse) {}\n}\n\nmessage ExportTraceServiceRequest {\n  // An array of ResourceSpans.\n  // For data coming from a single resource this array will typically contain one\n  // element. Intermediary nodes (such as OpenTelemetry Collector) that receive\n  // data from multiple origins typically batch the data before forwarding further and\n  // in that case this array will contain multiple elements.\n  repeated opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;\n}\n\nmessage ExportTraceServiceResponse {\n  // The details of a partially successful export request.\n  //\n  // If the request is only partially accepted\n  // (i.e. when the server accepts only parts of the data and rejects the rest)\n  // the server MUST initialize the `partial_success` field and MUST\n  // set the `rejected_<signal>` with the number of items it rejected.\n  //\n  // Servers MAY also make use of the `partial_success` field to convey\n  // warnings/suggestions to senders even when the request was fully accepted.\n  // In such cases, the `rejected_<signal>` MUST have a value of `0` and\n  // the `error_message` MUST be non-empty.\n  //\n  // A `partial_success` message with an empty value (rejected_<signal> = 0 and\n  // `error_message` = \"\") is equivalent to it not being set/present. Senders\n  // SHOULD interpret it the same way as in the full success case.\n  ExportTracePartialSuccess partial_success = 1;\n}\n\nmessage ExportTracePartialSuccess {\n  // The number of rejected spans.\n  //\n  // A `rejected_<signal>` field holding a `0` value indicates that the\n  // request was fully accepted.\n  int64 rejected_spans = 1;\n\n  // A developer-facing human-readable message in English. It should be used\n  // either to explain why the server rejected parts of the data during a partial\n  // success or to convey warnings/suggestions during a full success. The message\n  // should offer guidance on how users can address such issues.\n  //\n  // error_message is an optional field. An error_message with an empty value\n  // is equivalent to it not being set.\n  string error_message = 2;\n}\n","_type":"proto_file"}]}